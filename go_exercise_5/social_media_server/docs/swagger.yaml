basePath: /
definitions:
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  models.Comment:
    properties:
      content:
        type: string
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      post_id:
        type: integer
      updatedAt:
        type: string
    type: object
  models.Post:
    properties:
      comments:
        items:
          $ref: '#/definitions/models.Comment'
        type: array
      content:
        type: string
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      title:
        type: string
      updatedAt:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server for a social media application.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Social Media API
  version: "1.0"
paths:
  /comments:
    post:
      consumes:
      - application/json
      description: Create a new comment with content and associate it with a PostID
      parameters:
      - description: Comment object that needs to be created (ensure PostID is valid)
        in: body
        name: comment
        required: true
        schema:
          $ref: '#/definitions/models.Comment'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created comment
          schema:
            $ref: '#/definitions/models.Comment'
        "400":
          description: Bad Request (e.g., missing content or PostID)
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Post not found for the given PostID
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create a new comment for a post
      tags:
      - comments
  /comments/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a comment by its ID
      parameters:
      - description: Comment ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 'Message: Comment deleted successfully'
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid comment ID
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Comment not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete a comment
      tags:
      - comments
    put:
      consumes:
      - application/json
      description: Update the content of an existing comment by its ID
      parameters:
      - description: Comment ID
        in: path
        name: id
        required: true
        type: integer
      - description: Comment object with updated content (only Content is used)
        in: body
        name: comment
        required: true
        schema:
          $ref: '#/definitions/models.Comment'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated comment
          schema:
            $ref: '#/definitions/models.Comment'
        "400":
          description: Invalid comment ID or Bad Request (e.g., empty content)
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Comment not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update an existing comment
      tags:
      - comments
  /posts:
    get:
      consumes:
      - application/json
      description: Get a list of all posts with their comments
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved list of posts
          schema:
            items:
              $ref: '#/definitions/models.Post'
            type: array
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get all posts
      tags:
      - posts
    post:
      consumes:
      - application/json
      description: Create a new post with title and content
      parameters:
      - description: Post object that needs to be created
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/models.Post'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created post
          schema:
            $ref: '#/definitions/models.Post'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create a new post
      tags:
      - posts
  /posts/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a post by its ID and its associated comments
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 'Message: Post and associated comments deleted successfully'
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid post ID
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Post not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete a post
      tags:
      - posts
    get:
      consumes:
      - application/json
      description: Get details of a specific post by its ID, including comments
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved post
          schema:
            $ref: '#/definitions/models.Post'
        "400":
          description: Invalid post ID
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Post not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get a single post by ID
      tags:
      - posts
    put:
      consumes:
      - application/json
      description: Update title and content of an existing post by its ID
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      - description: Post object with updated fields (only Title and Content are used)
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/models.Post'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated post
          schema:
            $ref: '#/definitions/models.Post'
        "400":
          description: Invalid post ID or Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Post not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update an existing post
      tags:
      - posts
schemes:
- http
- https
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
